#!/usr/bin/env bash

set -e

import com.encodeering.ci.lang
import com.encodeering.ci.config

--docker-name-and-args () {
    case "$1" in
        --suffix)
            local suffix="$2"; shift; shift;
            ;;
        *)
            local suffix=""
            ;;
    esac

    local repository="${REPOSITORY}"
    local name="`dashcase "${PROJECT}" "${ARCH}"`";
    local version="`dashcase "${VERSION}" "${BASE##${PROJECT}}" "${VARIANT}" "${suffix}" "${BRANCH##master}"`"

    echo "${repository}/${name}:${version}" "$@"
}

docker-patch () {
    local base=`readlink -f $1`; shift
    local directory=`readlink -f $1`; shift
    local lookup=(
        "$VARIANT/$BASE/$VERSION/$ARCH"
        "$VARIANT/$BASE/$VERSION"
        "$VARIANT/$BASE"
        "$VARIANT"
        "$BASE/$VERSION/$ARCH"
        "$BASE/$VERSION"
        "$BASE"
        "$VERSION/$ARCH"
        "$VERSION"
        "."
    )

    declare -a targets=()

    for i in                   "${!lookup[@]}"; do
        local   target="${base}/${lookup[i]}"
        [ -d "${target}" ] || continue

        targets+=(`readlink -f "${target}"`)
    done

    targets=(`echo "${targets[@]}" | tr ' ' '\n' | sort -ru`)

    for         target in "${targets[@]}"; do
        find "${target}" -maxdepth 1 -iname "*.patch" -print0 | xargs --no-run-if-empty -0 -n1 bash -c \
            "echo found patch \$0; patch -p1 --directory="${directory}" -r- --no-backup-if-mismatch < \$0"
    done
}

docker-build () {
    retry 2 docker build -t `--docker-name-and-args "$@"`
}

docker-verify () {
    docker run $DOCKER_VERIFY_CONFIG --rm `--docker-name-and-args "$@"`; local status=$?
    unset       DOCKER_VERIFY_CONFIG

    return ${status}
}

docker-verify-config () {
    DOCKER_VERIFY_CONFIG="$1"
}

docker-pull () {
    local          image="$1"; shift

    docker pull "${image}"

    for tag in "$@"
    do
        [ -z "${tag}" ] || docker tag "${image}" "${tag}"
    done
}

docker-push () {
    docker images --filter "reference=`--docker-name-and-args`*" --format "{{ .Repository }}" \
        | uniq \
        | xargs --no-run-if-empty bash -c 'retry 2 docker push --all-tags ${1}' "push.sh"
}

docker-login () {
    retry 2 docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"
}

docker-scan () {
    [ `docker images -q -f 'dangling=false' | sort -u | xargs docker inspect --format "{{ .RepoTags }}" | dup | grep -cv "$1"` -eq 0 ] || die "host contains invalid images"
}

docker-verify-config ""
